#include<stdio.h>
//void printf1(int arr[3][5], int x, int y);
//void printf2(int(*p)[5], int x, int y);
int main() {
	/*int* p = NULL;-p是整形指针-指向整形的指针-可以存放整形的地址
	char* pc = NULL;-pc是字符指针-指向字符的指针-可以存放字符的地址
	数组指针-指向数组的指针-可以存放数组的地址
	int arr[10] = { 0 };
	arr --- 首元素地址
	&arr[0] --- 首元素地址
	&arr  --- 数组的地址*/

	//int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	//int(*p)[10] = &arr;//数组的地址要存起来
	////上面的p就是数组指针

	//char* c[5];
	//char*(*pc)[5] = &c;

	////数组指针的使用
	//int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	//int (*p)[10] = &arr;
	//int i = 0;
	//for (i = 0; i < 10; i++) {
	//	printf("%d ", (*p)[i]);
	//}
	//for (i = 0; i < 10; i++) {
	//	printf("%d ",*(*p + i));
	//}
	///*-------------------------------*/
	//int* pc = arr;
	//for (i = 0; i < 10; i++) {
	//	printf("%d ", *(pc + i));
	//}

	/*int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
	int(*p)[3][5] = &arr;
	printf1(arr, 3, 5);
	printf2(arr, 3, 5);
	return 0;*/

//参数是数组的形式
//void printf1(int arr[3][5] , int x , int y) {
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < x; i++) {
//		for (j = 0; j < y; j++) {
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//}
//参数是指针的形式
//void printf2(int(*p)[5], int x, int y) {
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < x; i++) {
//		for (j = 0; j < y; j++) {
//			/*printf("%d ", (*(p + i))[j]);*/
//			printf("%d ", *(*(p + i) + j));
//		}
//		printf("\n");
//	}

	int a[5] = { 1,2,3,4,5 };
	int* p = a;
	printf("%d", p[1]);
	return 0;
}